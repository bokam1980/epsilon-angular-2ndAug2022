1. client-side framework
2. Client-side app
3. client-side vs server side app/framework
4. server-side rendering and data pre-fetching for client-side app
5. component
6. SPA
7. client-side routing
8. application artifacts:
	a. packages
	b. transpiler
	c. bundler
	d. application development server
	e. application structure
	f. deisgn: HTML	
	g. styling: CSS
	h. coding: JavaScript/TypeScript/NativeScript etc.

9. JS modules, module format, module loader etc.

Node js folder:
C:\Program Files\nodejs

global folder for 4rd party NPM packages:
>C:\Users\<user-name>\AppData\Roaming\npm

command to install 3rd party node js packages:
>npm install <package-name> --location=global (node v>=16)
>npm install <package-name> --global (node v<16)

command to uninstall 3rd party node js packages:
>npm uninstall <package-name> --location=global (node v>=16)
>npm uninstall <package-name> --global (node v<16)



application configuration: package.json (root of the directory)
name of the app, version of the app, author of the app, packages for this app - development or production, scripts etc.


modular JS code

JS file => one module

export add, subtract methods from utility.js
we can import then in index.js

JS code => get it executed

C, C++, C#, Java => 

C++
V8, spidermonkey, JavaScript Core (Nitro), edge

module: an api to expose certain members of a JS file to the outside world

module format: 
	a. Common JS, ES6 format, AMD (asynchronous module definition), UMD (Universal module definition) etc...

Node JS uses CommonJS module format

module loader: which loads JS modules in runtime (browser/node/...) and resolves dependencies amongst the JS files
Node JS has a common js module loader s/w (built-in)

unfortunately browsers do not have this module-loader. You need to load a module loader in browser first, before loading source code written in some module format.

require js, system js etc....

requirejs understands AMD module format

soln: get your module format converted to AMD format
convert JS code written using latest features back to vanilla JS (older version)

2015+
ECMAScript (ES6)

<ES6
<ES5

ES 2015+ 

transpilation: 
ES2015+ => <ES6 features

babel, typescript etc.

NPM => node_modules
yarn => node_modules
bower => bower_components


zone.js => NgZone


features:

	angular modules: logical way of grouping app assets
	products: 
		allproducts
		singleproduct
	products.module.ts
	cart
		wishlist
		cart
	cart.module.ts
	payment
		c1, c2, c3....
	delivery
	order

root.module.ts




